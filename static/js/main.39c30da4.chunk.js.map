{"version":3,"sources":["api/todoApi.js","components/Todo.jsx","components/AddTodo.jsx","components/Todos.jsx","App.js","redux/todoReducer.js","redux/store.js","index.js"],"names":["Axios","require","default","getTodosApi","a","get","res","data","addTodoApi","post","deleteTodoApi","id","delete","editTodoApi","patch","useStyles","makeStyles","root","minWidth","maxWidth","input","margin","width","pointerEvents","disableInput","Todo","title","description","color","classes","dispatch","useDispatch","useForm","register","handleSubmit","useState","editMode","setEditMode","className","Card","autoComplete","onSubmit","then","type","newTodo","CardContent","TextField","inputRef","variant","size","label","name","defaultValue","InputLabelProps","shrink","multiline","rows","CardActions","Button","onClick","AddTodo","card","showAddTodo","reset","required","Todos","newCard","setNewCard","todos","useSelector","state","useEffect","allTodos","fontSize","forEach","todo","_id","map","s","App","initialState","todoReducer","action","filter","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39c30da4.chunk.js","sourcesContent":["const { default: Axios } = require(\"axios\");\r\n\r\nexport const getTodosApi = async () => {\r\n  const res = await Axios.get(\" https://todo.eachbase.com/api/HovhannesHambardzumyan/todos\");\r\n  return res.data;\r\n};\r\n\r\nexport const addTodoApi = async data => {\r\n  const res = await Axios.post(\" https://todo.eachbase.com/api/HovhannesHambardzumyan/todos\", data);\r\n  return res.data;\r\n};\r\n\r\nexport const deleteTodoApi = async id => {\r\n  const res = await Axios.delete(`https://todo.eachbase.com/api/HovhannesHambardzumyan/todos/${id}`);\r\n  return res.data;\r\n};\r\n\r\nexport const editTodoApi = async (id, data) => {\r\n  const res = await Axios.patch(`https://todo.eachbase.com/api/HovhannesHambardzumyan/todos/${id}`, data);\r\n  return res.data;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { deleteTodoApi, editTodoApi } from \"../api/todoApi\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    maxWidth: 275,\r\n  },\r\n\r\n  input: {\r\n    margin: 10,\r\n    width: \"92%\",\r\n    pointerEvents: \"auto\",\r\n  },\r\n  disableInput: {\r\n    margin: 10,\r\n    width: \"92%\",\r\n    pointerEvents: \"none\",\r\n  },\r\n});\r\n\r\nconst Todo = ({ title, description, color, id }) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch(); //Setting useDispatch hook to dispatch actions\r\n  const { register, handleSubmit } = useForm(); //Hook from react-hook-form package to collect form data and submit it\r\n  const [editMode, setEditMode] = useState(true); //State for editing todo card\r\n\r\n  //Delete todo card\r\n  const handleDelete = () => {\r\n    deleteTodoApi(id).then(() => {\r\n      dispatch({ type: \"DELETE_TODO\", id });\r\n    });\r\n  };\r\n\r\n  //Toggle edit mode\r\n  const handleEdit = () => {\r\n    setEditMode(!editMode);\r\n  };\r\n\r\n  //Submit edited data to api\r\n  const onSubmit = data => {\r\n    if (editMode) {\r\n      editTodoApi(id, data).then(res => {\r\n        const newTodo = res;\r\n        dispatch({ type: \"UPDATE_TODO\", id, newTodo });\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={\"todo-item\"}>\r\n      Todo card\r\n      <Card className={classes.root}>\r\n        <form autoComplete='off' onSubmit={handleSubmit(onSubmit)}>\r\n          <CardContent>\r\n            <TextField\r\n              inputRef={register}\r\n              variant='outlined'\r\n              size='small'\r\n              label='Title'\r\n              name='title'\r\n              className={editMode ? classes.disableInput : classes.input}\r\n              defaultValue={title}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            />\r\n            <TextField\r\n              inputRef={register}\r\n              variant='outlined'\r\n              size='small'\r\n              label='Description'\r\n              name='description'\r\n              multiline\r\n              rows={2}\r\n              className={editMode ? classes.disableInput : classes.input}\r\n              defaultValue={description}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            />\r\n            <div className={\"color-input\"}>\r\n              <TextField\r\n                inputRef={register}\r\n                variant='outlined'\r\n                size='small'\r\n                type='color'\r\n                label='Color'\r\n                name='color'\r\n                defaultValue={color}\r\n                className={editMode ? classes.disableInput : classes.input}\r\n              />\r\n            </div>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button size='small' onClick={handleEdit} type='submit'>\r\n              {editMode ? <EditIcon /> : <SaveIcon />}\r\n              {editMode ? \"Edit\" : \"Save\"}\r\n            </Button>\r\n\r\n            <Button size='small' onClick={handleDelete}>\r\n              <DeleteIcon /> Delete\r\n            </Button>\r\n          </CardActions>\r\n        </form>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { addTodoApi } from \"../api/todoApi\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    maxWidth: 275,\r\n  },\r\n\r\n  input: {\r\n    margin: 10,\r\n    width: \"92%\",\r\n  },\r\n});\r\n\r\nconst AddTodo = ({ card, showAddTodo }) => {\r\n  const classes = useStyles();\r\n  const { register, handleSubmit, reset } = useForm(); //Hook from react-hook-form to collect data and submit it\r\n  const dispatch = useDispatch(); //Setting useDispatch hook to dispatch actions\r\n\r\n  //Adding new todo card\r\n  const onSubmit = data => {\r\n    addTodoApi(data).then(res => {\r\n      const newTodo = res;\r\n      dispatch({ type: \"ADD_TODO\", newTodo });\r\n      reset();\r\n    });\r\n    showAddTodo(false);\r\n  };\r\n\r\n  return (\r\n    <div className={!card ? \"default\" : \"default add-todo-card\"}>\r\n      Add Todo\r\n      <Card className={classes.root}>\r\n        <form autoComplete='off' onSubmit={handleSubmit(onSubmit)}>\r\n          <CardContent>\r\n            <TextField\r\n              required\r\n              inputRef={register}\r\n              variant='outlined'\r\n              size='small'\r\n              label='Title'\r\n              name='title'\r\n              className={classes.input}\r\n            />\r\n            <TextField\r\n              required\r\n              inputRef={register}\r\n              variant='outlined'\r\n              size='small'\r\n              label='Description'\r\n              name='description'\r\n              className={classes.input}\r\n              multiline\r\n              rows={2}\r\n            />\r\n            <div className={\"color-input\"}>\r\n              <TextField\r\n                required\r\n                inputRef={register}\r\n                variant='outlined'\r\n                size='small'\r\n                type='color'\r\n                label='Color'\r\n                name='color'\r\n                className={classes.input}\r\n                defaultValue='#000000'\r\n              />\r\n            </div>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Button size='small' type='submit'>\r\n              <SaveIcon /> Save\r\n            </Button>\r\n          </CardActions>\r\n        </form>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTodo;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Todo from \"./Todo\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport AddTodo from \"./AddTodo\";\r\nimport { deleteTodoApi, getTodosApi } from \"../api/todoApi\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\n\r\nconst Todos = () => {\r\n  const [newCard, setNewCard] = useState(false); //Setting state to toggle new todo card\r\n  const todos = useSelector(state => state.todos); // Getting state from redux\r\n  const dispatch = useDispatch(); //Setting useDispatch hook to dispatch actions\r\n\r\n  //Toggle new todo card\r\n  const showAddTodo = () => {\r\n    setNewCard(!newCard);\r\n  };\r\n\r\n  //Delete all todos and clearing state\r\n  const deleteBoard = () => {\r\n    dispatch({ type: \"DELETE_ALL\" });\r\n    todos.forEach(todo => {\r\n      deleteTodoApi(todo._id);\r\n    });\r\n  };\r\n\r\n  //Getting all todos from api\r\n  useEffect(() => {\r\n    getTodosApi().then(res => {\r\n      const allTodos = res;\r\n      dispatch({ type: \"GET_TODOS\", allTodos });\r\n    });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      <div className='btn-container'>\r\n        <div className='btn-group'>\r\n          <AddCircleIcon\r\n            fontSize='large'\r\n            className={!newCard ? \"add-todo-btn\" : \"add-todo-btn close-btn\"}\r\n            onClick={showAddTodo}\r\n          />\r\n          <p>Add Todo</p>\r\n        </div>\r\n        <div className='btn-group'>\r\n          <p>Delete All</p>\r\n          <DeleteForeverIcon fontSize='large' className='btn-delete-all' onClick={deleteBoard} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='todo-board'>\r\n        <AddTodo card={newCard} showAddTodo={showAddTodo} />\r\n        {todos.map(s => (\r\n          <Todo key={s._id} id={s._id} title={s.title} description={s.description} color={s.color} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n","import \"./App.css\";\nimport Todos from \"./components/Todos\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <div className='App-header'>\n        <h3>Todo App</h3>\n        <Todos />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = [];\r\n\r\nconst todoReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"GET_TODOS\": {\r\n      return [...state, ...action.allTodos];\r\n    }\r\n    case \"ADD_TODO\": {\r\n      return [...state, action.newTodo];\r\n    }\r\n    case \"DELETE_TODO\": {\r\n      return state.filter(todo => todo._id !== action.id);\r\n    }\r\n    case \"UPDATE_TODO\": {\r\n      return state.map(todo => {\r\n        if (todo._id === action.id) {\r\n          return action.newTodo;\r\n        } else {\r\n          return todo;\r\n        }\r\n      });\r\n    }\r\n    case \"DELETE_ALL\": {\r\n      return initialState;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoReducer;\r\n","import { combineReducers, compose, createStore } from \"redux\";\r\nimport todoReducer from \"./todoReducer\";\r\n\r\nconst reducers = combineReducers({\r\n  todos: todoReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(reducers, composeEnhancers());\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}